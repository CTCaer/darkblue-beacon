/*
 * This file has been automatically generated by the WICED Smart Designer.
 * Definitions for constants used in the device's GATT database and function
 * prototypes that can be used to send notifications
 *
 */

// line_cook_w_names_db.h

#define GATT_DB_ENABLE_UART					//UART is enabled in wic file
// Maximum number of bonded peers
#define GATT_DB_MAX_BONDED_PEERS 4
// ***** Primary service 'Generic Access'
#define HDLS_GENERIC_ACCESS                                           0x0100
#define UUID_SERVICE_GAP                                              0x1800
// ----- Characteristic 'Device Name'
#define HDLC_GENERIC_ACCESS_DEVICE_NAME                               0x0110
#define HDLC_GENERIC_ACCESS_DEVICE_NAME_VALUE                         0x0111
#define UUID_CHARACTERISTIC_DEVICE_NAME                               0x2A00
// ----- Characteristic 'Appearance'
#define HDLC_GENERIC_ACCESS_APPEARANCE                                0x0120
#define HDLC_GENERIC_ACCESS_APPEARANCE_VALUE                          0x0121
#define UUID_CHARACTERISTIC_APPEARANCE                                0x2A01
// ***** Primary service 'Generic Attribute'
#define HDLS_GENERIC_ATTRIBUTE                                        0x0200
#define UUID_SERVICE_GATT                                             0x1801
// ***** Primary service 'Line Cook Cooking Step'
#define HDLS_LINE_COOK_COOKING_STEP                                   0x0300
#define __UUID_LINE_COOK_COOKING_STEP                                 0xcf, 0x15, 0xfe, 0xe0, 0x4a, 0xe6, 0x44, 0x7f, 0x8b, 0x44, 0x57, 0x1f, 0xd8, 0x44, 0x38, 0xf2
// ----- Characteristic 'Cooking Step'
#define HDLC_LINE_COOK_COOKING_STEP_COOKING_STEP                      0x0310
#define HDLC_LINE_COOK_COOKING_STEP_COOKING_STEP_VALUE                0x0311
#define __UUID_LINE_COOK_COOKING_STEP_COOKING_STEP                    0xf9, 0xa8, 0xb1, 0x1a, 0x10, 0x6a, 0x43, 0xea, 0xb2, 0x82, 0x18, 0x9a, 0x9c, 0xc3, 0x9f, 0x51
// User Description
#define HDLD_LINE_COOK_COOKING_STEP_COOKING_STEP_USER_DESCRIPTION     0x0320
// Client Configuration
#define HDLD_LINE_COOK_COOKING_STEP_COOKING_STEP_CLIENT_CONFIGURATION 0x0330

#pragma pack(1)
// Host information for NVRAM
typedef PACKED struct
{
    // BD address of the bonded host
    BD_ADDR  bdaddr;

    // Current value of the client configuration descriptor for characteristic 'Cooking Step'
    UINT16 line_cook_cooking_step_cooking_step_client_configuration;
}  __HOSTINFO_PEER;

// Host information for NVRAM
typedef PACKED struct
{
    // Part of HOSTINFO generated by wizard for every bonded peer
    __HOSTINFO_PEER peer[GATT_DB_MAX_BONDED_PEERS];
} __HOSTINFO;
#pragma pack()

// External definitions
extern const UINT8  gatt_database[];
extern const UINT16 gatt_database_len;
extern UINT8        line_cook_w_names_indication_sent;           // 1 means waiting for ack
extern UINT16       line_cook_w_names_connection_handle;         // HCI handle of connection, not zero when connected
extern const BLE_PROFILE_GPIO_CFG
                    line_cook_w_names_gpio_cfg;                  // Defines GPIO configuration used by the application
extern BD_ADDR      line_cook_w_names_remote_addr;               // Address of currently connected client
extern UINT8        line_cook_w_names_uuid_main_vsc_service[16]; // Main vendor specific service
// Pointer to the generated part of hostinfo
extern __HOSTINFO   *p_hostinfo_generated;

// Functions definitions

// Will be called on indication conformation
extern void line_cook_w_names_indication_cfm();
// Registers timer. Should be called from line_cook_w_names_create()
extern void line_cook_w_names_reg_timer();
// Initializes persistent values in the hostinfo to add bonded peer
extern void line_cook_w_names_add_bond(UINT8 *bda);
// Prepares generated code for connection - writes persistent values from __HOSTINFO to GATT DB
extern void __on_connection_up();
// Sends notifications or/and indications for every client configuration descriptor
// Updates __HOSTINFO by the value written by peer.
// Returns true if any persistent value is changed
extern BOOL __write_handler(UINT16 handle, int len, UINT8 *attrPtr);


// ------------------- You have to implement these functions ----------------

// Custom function to be called every fine timer tick
extern void line_cook_w_names_timer_fine();

// It will be called at the write handler and should return TRUE if any persistent value is changed
extern BOOL on_write_line_cook_cooking_step_cooking_step(int len, UINT8 *attrPtr);


// ------------------- You can call these functions ----------------

// It should be called when 'Device Name' is changed
extern BOOL store_in_db_generic_access_device_name(UINT8* p_value, UINT8 value_len);

// It should be called when 'Appearance' is changed
extern BOOL store_in_db_generic_access_appearance(UINT8* p_value, UINT8 value_len);

// It should be called when 'Cooking Step' is changed
extern BOOL store_in_db_line_cook_cooking_step_cooking_step(UINT8* p_value, UINT8 value_len, BOOL write, BOOL notify);
