/*
 * This file has been automatically generated by the WICED Smart Designer.
 * Definitions for constants used in the device's GATT database and function
 * prototypes that can be used to send notifications
 *
 */

// line_cook_db.h

#define GATT_DB_ENABLE_UART					//UART is enabled in wic file
// ***** Primary service 'Generic Access'
#define HDLS_GENERIC_ACCESS                                   0x0100
#define UUID_SERVICE_GAP                                      0x1800
// ----- Characteristic 'Device Name'
#define HDLC_GENERIC_ACCESS_DEVICE_NAME                       0x0110
#define HDLC_GENERIC_ACCESS_DEVICE_NAME_VALUE                 0x0111
#define UUID_CHARACTERISTIC_DEVICE_NAME                       0x2A00
// ----- Characteristic 'Appearance'
#define HDLC_GENERIC_ACCESS_APPEARANCE                        0x0120
#define HDLC_GENERIC_ACCESS_APPEARANCE_VALUE                  0x0121
#define UUID_CHARACTERISTIC_APPEARANCE                        0x2A01
// ***** Primary service 'Generic Attribute'
#define HDLS_GENERIC_ATTRIBUTE                                0x0200
#define UUID_SERVICE_GATT                                     0x1801
// ***** Primary service 'Cooking Steps'
#define HDLS_COOKING_STEPS                                    0x0300
#define __UUID_COOKING_STEPS                                  0x39, 0xed, 0xa2, 0xfc, 0xd6, 0x94, 0x44, 0x8e, 0xbd, 0x3a, 0x78, 0x53, 0x9e, 0x84, 0xc0, 0x2c
// ----- Characteristic 'Cooking Step'
#define HDLC_COOKING_STEPS_COOKING_STEP                       0x0310
#define HDLC_COOKING_STEPS_COOKING_STEP_VALUE                 0x0311
#define __UUID_COOKING_STEPS_COOKING_STEP                     0xc5, 0x21, 0x46, 0x8c, 0x74, 0x75, 0x40, 0x67, 0xb9, 0x77, 0x7d, 0x24, 0x3d, 0x2a, 0x81, 0x52
// Presentation Format
#define HDLD_COOKING_STEPS_COOKING_STEP_PRESENTATION_FORMAT_0 0x0320
// User Description
#define HDLD_LINE_COOK_COOKING_STEP_COOKING_STEP_USER_DESCRIPTION     0x0321
// ***** Primary service 'Over the Range'
#define HDLS_OVER_THE_RANGE                                   0x0400
#define __UUID_OVER_THE_RANGE                                 0xd1, 0xc6, 0xda, 0x3d, 0xf9, 0xfe, 0x47, 0x6d, 0xa0, 0xe5, 0x58, 0x4b, 0xd6, 0xc4, 0xed, 0x1c
// ----- Characteristic 'Time'
#define HDLC_OVER_THE_RANGE_TIME                              0x0410
#define HDLC_OVER_THE_RANGE_TIME_VALUE                        0x0411
#define __UUID_OVER_THE_RANGE_TIME                            0xc8, 0xcd, 0x19, 0x93, 0x5d, 0xa0, 0x49, 0xd9, 0xbd, 0xf1, 0x8a, 0x6f, 0x61, 0xf0, 0x1c, 0x48
// Client Configuration
#define HDLD_OVER_THE_RANGE_TIME_CLIENT_CONFIGURATION         0x0420
// Presentation Format
#define HDLD_OVER_THE_RANGE_TIME_PRESENTATION_FORMAT_0        0x0430
// ----- Characteristic 'Fan'
#define HDLC_OVER_THE_RANGE_FAN                               0x0440
#define HDLC_OVER_THE_RANGE_FAN_VALUE                         0x0441
#define __UUID_OVER_THE_RANGE_FAN                             0xa3, 0x27, 0x4e, 0x7c, 0xd1, 0x35, 0x4f, 0x44, 0xbf, 0x1d, 0x7f, 0x4b, 0x09, 0x61, 0x5f, 0xe6
// Client Configuration
#define HDLD_OVER_THE_RANGE_FAN_CLIENT_CONFIGURATION          0x0450
// Presentation Format
#define HDLD_OVER_THE_RANGE_FAN_PRESENTATION_FORMAT_0         0x0460
// ----- Characteristic 'Light'
#define HDLC_OVER_THE_RANGE_LIGHT                             0x0470
#define HDLC_OVER_THE_RANGE_LIGHT_VALUE                       0x0471
#define __UUID_OVER_THE_RANGE_LIGHT                           0x4f, 0x66, 0x25, 0x2d, 0xbe, 0x24, 0x41, 0x9a, 0x98, 0xc2, 0x30, 0x11, 0xe2, 0x4f, 0x8f, 0x17
// Client Configuration
#define HDLD_OVER_THE_RANGE_LIGHT_CLIENT_CONFIGURATION        0x0480
// Presentation Format
#define HDLD_OVER_THE_RANGE_LIGHT_PRESENTATION_FORMAT_0       0x0490

#pragma pack(1)
// Host information for NVRAM
typedef PACKED struct
{
    // BD address of the bonded host
    BD_ADDR  bdaddr;

    // Current value of the client configuration descriptor for characteristic 'Time'
    UINT16 over_the_range_time_client_configuration;

    // Current value of the client configuration descriptor for characteristic 'Fan'
    UINT16 over_the_range_fan_client_configuration;

    // Current value of the client configuration descriptor for characteristic 'Light'
    UINT16 over_the_range_light_client_configuration;
}  __HOSTINFO;
#pragma pack()

// External definitions
extern const UINT8  gatt_database[];
extern const UINT16 gatt_database_len;
extern UINT8        line_cook_indication_sent;           // 1 means waiting for ack
extern UINT16       line_cook_connection_handle;         // HCI handle of connection, not zero when connected
extern const BLE_PROFILE_GPIO_CFG
                    line_cook_gpio_cfg;                  // Defines GPIO configuration used by the application
extern BD_ADDR      line_cook_remote_addr;               // Address of currently connected client
extern UINT8        line_cook_uuid_main_vsc_service[16]; // Main vendor specific service
// Pointer to the generated part of hostinfo
extern __HOSTINFO   *p_hostinfo_generated;

// Functions definitions

// Will be called on indication conformation
extern void line_cook_indication_cfm();
// Registers timer. Should be called from line_cook_create()
extern void line_cook_reg_timer();
// Initializes persistent values in the hostinfo to add bonded peer
extern void line_cook_add_bond(UINT8 *bda);
// Prepares generated code for connection - writes persistent values from __HOSTINFO to GATT DB
extern void __on_connection_up();
// Sends notifications or/and indications for every client configuration descriptor
// Updates __HOSTINFO by the value written by peer.
// Returns true if any persistent value is changed
extern BOOL __write_handler(UINT16 handle, int len, UINT8 *attrPtr);


// ------------------- You have to implement these functions ----------------

// It will be called at the write handler and should return TRUE if any persistent value is changed
extern BOOL on_write_cooking_steps_cooking_step(int len, UINT8 *attrPtr);

// It will be called at the write handler and should return TRUE if any persistent value is changed
extern BOOL on_write_over_the_range_time(int len, UINT8 *attrPtr);

// It will be called at the write handler and should return TRUE if any persistent value is changed
extern BOOL on_write_over_the_range_fan(int len, UINT8 *attrPtr);

// It will be called at the write handler and should return TRUE if any persistent value is changed
extern BOOL on_write_over_the_range_light(int len, UINT8 *attrPtr);


// ------------------- You can call these functions ----------------

// It should be called when 'Device Name' is changed
extern BOOL store_in_db_generic_access_device_name(UINT8* p_value, UINT8 value_len);

// It should be called when 'Appearance' is changed
extern BOOL store_in_db_generic_access_appearance(UINT8* p_value, UINT8 value_len);

// It should be called when 'Cooking Step' is changed
extern BOOL store_in_db_cooking_steps_cooking_step(UINT8* p_value, UINT8 value_len);

// It should be called when 'Time' is changed
extern BOOL store_in_db_over_the_range_time(UINT8* p_value, UINT8 value_len, BOOL write, BOOL notify);

// It should be called when 'Fan' is changed
extern BOOL store_in_db_over_the_range_fan(UINT8* p_value, UINT8 value_len, BOOL write, BOOL notify);

// It should be called when 'Light' is changed
extern BOOL store_in_db_over_the_range_light(UINT8* p_value, UINT8 value_len, BOOL write, BOOL notify);
